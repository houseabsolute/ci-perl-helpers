parameters:
  - name: use_default_perls
    type: boolean
    default: false
  - name: perls
    type: object
    default: []
  - name: from_perl
    type: string
    default: ''
  - name: to_perl
    type: string
    default: ''
  - name: allow_failure
    type: object
    default: [ 'blead' ]
  - name: coverage
    type: string
    default: ''
  - name: coverage_partitions
    type: number
    default: 1
  - name: coverage_perl
    type: string
    default: ''
  - name: publish_coverage_artifact
    type: boolean
    default: false
  - name: extra_prereqs
    type: object
    default: []
  - name: cache_key
    type: string
    default: 'cache'
  - name: test_xt
    type: boolean
    default: false
  - name: debug
    type: boolean
    default: false
  - name: choco
    type: object
    default: []
  - name: pre_test_steps
    type: stepList
    default: []
  - name: post_test_steps
    type: stepList
    default: []

stages:
  - stage: Windows
    dependsOn: Build
    variables:
      - name: BERRYBREW_TAG
        value: v1.29
    jobs:
      - job: GenerateMatrix
        displayName: Generate Windows test matrix
        pool:
          vmImage: ubuntu-20.04
        variables:
          ${{ if parameters.use_default_perls }}:
            perls: "--perls latest"
            from_perl: ""
            to_perl: ""
          ${{ if and( not( parameters.use_default_perls ), ne( join( ',', parameters.perls ), '' ) ) }}:
            perls: "--perls ${{ join( ',', parameters.perls ) }}"
          ${{ if and( not( parameters.use_default_perls ), eq( join( ',', parameters.perls ), '' ) ) }}:
            perls: ""
          ${{ if and( not( parameters.use_default_perls ), ne( parameters.from_perl, '' ) ) }}:
            from_perl: "--from-perl ${{ parameters.from_perl }}"
          ${{ if and( not( parameters.use_default_perls ), eq( parameters.from_perl, '' ) ) }}:
            from_perl: ""
          ${{ if and( not( parameters.use_default_perls ), ne( parameters.to_perl, '' ) ) }}:
            to_perl: "--to-perl ${{ parameters.to_perl }}"
          ${{ if and( not( parameters.use_default_perls ), eq( parameters.to_perl, '' ) ) }}:
            to_perl: ""
          ${{ if ne( join( ',', parameters.allow_failure ), '' ) }}:
            allow_failure: "--allow-failure ${{ join( ',', parameters.allow_failure ) }}"
          ${{ if eq( join( ',', parameters.allow_failure ), '' ) }}:
            allow_failure: ""
          ${{ if parameters.test_xt }}:
            test_xt: "--test-xt"
          ${{ if not( parameters.test_xt ) }}:
            test_xt: ""
          ${{ if ne( parameters.coverage, '' ) }}:
            coverage: "--coverage ${{ parameters.coverage }} --coverage-partitions ${{ parameters.coverage_partitions }}"
          ${{ if eq( parameters.coverage, '' ) }}:
            coverage: ""
          ${{ if ne( parameters.coverage_perl, '' ) }}:
            coverage_perl: "--coverage-perl ${{ parameters.coverage_perl }}"
          ${{ if eq( parameters.coverage_perl, '' ) }}:
            coverage_perl: ""
        steps:
          - checkout: ci-perl-helpers
          - bash: |
              set -eo pipefail
              set -x
              perl ./matrix/bin/print-test-matrix.pl \
                  --os Windows \
                  $(perls) \
                  $(from_perl) \
                  $(to_perl) \
                  $(test_xt) \
                  $(coverage) \
                  $(coverage_perl) \
                  --berrybrew-tag $(BERRYBREW_TAG) \
                  | tee ./test-matrix
              matrix=$( cat ./test-matrix )
              set +x
              echo "##vso[task.setVariable variable=matrix;isOutput=true]$matrix"
            name: matrixGenerator
            displayName: Generate perl version matrix

      - job: RunTests
        # The matrix key will get appended to this display name
        displayName: "Run tests with "
        dependsOn: GenerateMatrix
        strategy:
          matrix: $[ dependencies.GenerateMatrix.outputs['matrixGenerator.matrix'] ]
        variables:
          - template: variables.yml
            parameters:
              debug: ${{ parameters.debug }}
          - name: CIPH_ALLOW_FAILURE
            value: $(allow_failure)
          - name: CIPH_COVERAGE
            value: $(coverage)
          - name: CIPH_TEST_XT
            value: $(test_xt)
          - name: CIPH_TOOLS_BIN_DIR
            value: $(CI_WORKSPACE_DIRECTORY)\ci-perl-helpers-tools\bin
          - name: CIPH_TOOLS_CPANFILE
            value: $(CI_WORKSPACE_DIRECTORY)\ci-perl-helpers-tools\cpanfile
          - name: BERRYBREW_ROOT
            value: '/c/Program Files (x86)/berrybrew'
          - name: BERRYBREW_EXE
            value: '$(BERRYBREW_ROOT)/bin/berrybrew'
        pool:
          vmImage: windows-latest
        steps:

          - ${{ if ne( join( '', parameters.choco ), '' ) }}:
            - bash: |
                set -e
                set -x
                for pkg in ${{ join( ' ', parameters.choco ) }}; do
                    choco install $pkg
                done
              displayName: Install extra packages with choco

          - powershell: |
              # This reverts the change in
              # https://github.com/actions/virtual-environments/pull/211/.
              Add-MachinePathItem "C:\Program Files\Git\mingw64\bin"
              Add-MachinePathItem "C:\Program Files\Git\usr\bin"
              Add-MachinePathItem "C:\Program Files\Git\bin"
            displayName: Ensure git mingw utilities are in our path

          # I'd really prefer to use chocolatey for this but the chocolatey
          # package for berrybrew simply installs the HEAD of the berrybrew repo,
          # so it's impossible to guarantee a working install, much less a
          # specific version. See
          # https://github.com/camilohe/berrybrew.install/issues/1.
          - bash: |
              set -e
              set -x
              cd /tmp
              curl --location --remote-name https://github.com/stevieb9/berrybrew/archive/${BERRYBREW_TAG}.zip
              unzip ${BERRYBREW_TAG}.zip
              no_v=$( echo $BERRYBREW_TAG | sed -e 's/^v//' )
              cd berrybrew-${no_v}/download
              unzip berrybrew.zip
              mkdir -p "$BERRYBREW_ROOT"
              cp -r bin "$BERRYBREW_ROOT/"
              cp -r data "$BERRYBREW_ROOT/"
            displayName: Install berrybrew from zip file

          - powershell: |
              & 'C:\Program Files (x86)\berrybrew\bin\berrybrew-refresh.bat'
            displayName: Run berrybrew-refresh.bat to finalize berrybrew install

          - template: steps/install-helper-tools.yml

          - task: Cache@2
            displayName: Define tools-perl base cache
            inputs:
              key: '"v1" | "tools-perl base" | "${{ parameters.cache_key }}" | "$(latest_stable_perl)" | "Windows"'
              path: C:\berrybrew\$(latest_stable_perl)\perl

          - bash: |
              set -e
              set -x
              # It seems like we need to re-run this even if we already have a
              # cached version. I'm guessing it does some sort of registry
              # fiddling that's necessary for the clone command that comes after
              # this to work. But this reinstall does not wipe the installed
              # modules, so the later step to install deps is still much quicker
              # when we get this perl from the cache.
              "$BERRYBREW_EXE" install "$LATEST_STABLE_PERL"
              export BERRYBREW_CONFIG="$BERRYBREW_ROOT/data/config.json"
              "$BERRYBREW_EXE" exec --with "$LATEST_STABLE_PERL" perl -e 'use strict;use warnings;my $file = shift;open my $fh, $file or die $!;my $content = do { local $/; <$fh> };close $fh or die $!;my $q = chr(34); $content =~ s/(${q}custom_exec${q}\s*:\s*)${q}false${q}/$1${q}true${q}/;open $fh, q{>}, $file or die $!;print {$fh} $content or die $!;close $fh or die $!;' "$BERRYBREW_CONFIG"
              cat "$BERRYBREW_CONFIG"

              # berrybrew appears to exit 0 no matter what happens, so this bit is
              # here to make sure we actually installed the Perl we wanted.
              echo 1 > exit-code
              "$BERRYBREW_EXE" exec --with "$LATEST_STABLE_PERL" perl -e 'use autodie; open my $fh, q{>}, q{exit-code}; print {$fh} q{0}; close $fh'
              exit $( cat exit-code )
            displayName: Berrybrew install tools-perl

          - task: Cache@2
            displayName: Define tools-perl clone cache
            inputs:
              key: '"v1" | "tools-perl clone" | "${{ parameters.cache_key }}" | "$(perl)" | "Windows" | $(CIPH_TOOLS_CPANFILE)'
              path: C:\berrybrew\tools-perl\perl

          - bash: |
              set -e
              set -x
              "$BERRYBREW_EXE" clone "$LATEST_STABLE_PERL" tools-perl
            displayName: Berrybrew clone installed Perl as runtime-perl

          - task: Cache@2
            displayName: Define runtime-perl base cache
            inputs:
              key: '"v1" | "runtime-perl base" | "${{ parameters.cache_key }}" | "$(berrybrew_perl)" | "Windows"'
              path: C:\berrybrew\$(berrybrew_perl)\perl

          - bash: |
              set -e
              set -x
              "$BERRYBREW_EXE" install "$BERRYBREW_PERL"
            displayName: Berrybrew install runtime-perl

          - task: Cache@2
            displayName: Define runtime-perl clone cache
            inputs:
              key: '"v1" | "runtime-perl clone" | "${{ parameters.cache_key }}" | "$(perl)" | "Windows"'
              path: C:\berrybrew\runtime-perl\perl

          - bash: |
              set -e
              set -x
              "$BERRYBREW_EXE" clone "$BERRYBREW_PERL" runtime-perl
            displayName: Berrybrew clone installed Perl as runtime-perl

          - template: ../shared/install-cpm.yml

          - template: steps/install-tools-prereqs.yml

          - template: steps/test-core-steps.yml
            parameters:
              runtime_perl_path: $(Pipeline.Workspace)/local-lib/runtime-perl
              extra_prereqs: ${{ parameters.extra_prereqs }}
              cache_key: ${{ parameters.cache_key }}
              publish_coverage_artifact: ${{ parameters.publish_coverage_artifact }}
              test_xt: ${{ parameters.test_xt }}

          - ${{ parameters.post_test_steps }}
